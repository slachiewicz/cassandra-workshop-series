name=dse-sink
connector.class=com.datastax.kafkaconnector.DseSinkConnector
tasks.max=1

# Topics to subscribe to, comma-delimited.
topics=tick-stream

# Comma-separated list of DSE cluster contact points. Used by the DataStax Driver to discover
# DSE cluster topology. Defaults to empty, meaning localhost.
contactPoints=localhost

# DSE data center name to which the DataStax Driver connects. Required if contactPoints
# is specified.
loadBalancing.localDc=dc1

# Native transport port to connect to on DSE nodes; defaults to 9042.
port=9042

# Maximum number of requests to send to DSE at a single time. Defaults to 500.
#maxConcurrentRequests=500

### Settings for topic my_topic ###

# Mapping for String
topic.tick-stream.keyspace=datastax_tickdata_demo
topic.tick-stream.table=tick_data
topic.tick-stream.mapping=symbol=key, value=value
topic.tick-stream.consistencyLevel=LOCAL_ONE

# Time-to-live. Set to the number of seconds before the data is automatically deleted in DSE.
# Defaults to -1 (disabled).
#topic.my_topic.ttl=-1

# Whether to treat nulls in Kafka as UNSET in DSE. DataStax recommends using the default to
# avoid creating unnecessary tombstones. Defaults to true.
#topic.my_topic.nullToUnset=true

# Locale to use for locale-sensitive conversions. Defaults to en_US.
#topic.my_topic.codec.locale=en_US

# The time zone to use for temporal conversions that do not convey any explicit time zone
# information. Defaults to UTC.
#topic.my_topic.codec.timeZone=UTC

# The temporal pattern to use for `String` to CQL `timestamp` conversion. Valid choices:
#
# - A date-time pattern such as `yyyy-MM-dd HH:mm:ss`.
# - A pre-defined formatter such as `ISO_ZONED_DATE_TIME` or `ISO_INSTANT`. Any public static
#   field in `java.time.format.DateTimeFormatter` can be used.
# - The special formatter `CQL_TIMESTAMP`, which is a special parser that accepts all valid CQL
#   literal formats for the `timestamp` type.
# Defaults to CQL_TIMESTAMP.
#topic.my_topic.codec.timestamp=CQL_TIMESTAMP

# The temporal pattern to use for `String` to CQL `date` conversion. Valid choices:
#
# - A date-time pattern such as `yyyy-MM-dd`.
# - A pre-defined formatter such as `ISO_LOCAL_DATE`. Any public static field in
#   `java.time.format.DateTimeFormatter` can be used.
# Defaults to ISO_LOCAL_DATE.
#topic.my_topic.codec.date=ISO_LOCAL_DATE

# The temporal pattern to use for `String` to CQL `time` conversion. Valid choices:
#
# - A date-time pattern, such as `HH:mm:ss`.
# - A pre-defined formatter, such as `ISO_LOCAL_TIME`. Any public static field in
#   `java.time.format.DateTimeFormatter` can be used.
# Defaults to ISO_LOCAL_TIME.
#topic.my_topic.codec.time=ISO_LOCAL_TIME

# If the input is a string containing only digits that cannot be parsed using the
# `codec.timestamp` format, the specified time unit is applied to the parsed value. All
# `TimeUnit` enum constants are valid choices.
# Defaults to MILLISECONDS.
#topic.my_topic.codec.unit=MILLISECONDS
